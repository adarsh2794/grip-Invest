[{"/home/adarsh/Desktop/Companies/crm/src/index.js":"1","/home/adarsh/Desktop/Companies/crm/src/App.js":"2","/home/adarsh/Desktop/Companies/crm/src/reportWebVitals.js":"3","/home/adarsh/Desktop/Companies/crm/src/components/actions/Actions.js":"4","/home/adarsh/Desktop/Companies/crm/src/components/NavBar.js":"5","/home/adarsh/Desktop/Companies/crm/src/components/client/client.js":"6","/home/adarsh/Desktop/Companies/crm/src/components/actions/AddClient.js":"7","/home/adarsh/Desktop/Companies/crm/src/components/actions/UpdateClient.js":"8"},{"size":500,"mtime":1615902425500,"results":"9","hashOfConfig":"10"},{"size":531,"mtime":1615907880366,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1615902425500,"results":"12","hashOfConfig":"10"},{"size":364,"mtime":1615906895949,"results":"13","hashOfConfig":"10"},{"size":1128,"mtime":1615907871666,"results":"14","hashOfConfig":"10"},{"size":3940,"mtime":1615905722375,"results":"15","hashOfConfig":"10"},{"size":5735,"mtime":1615906812760,"results":"16","hashOfConfig":"10"},{"size":2036,"mtime":1615906827893,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1nmlkqg",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/home/adarsh/Desktop/Companies/crm/src/index.js",[],["36","37"],"/home/adarsh/Desktop/Companies/crm/src/App.js",[],"/home/adarsh/Desktop/Companies/crm/src/reportWebVitals.js",[],"/home/adarsh/Desktop/Companies/crm/src/components/actions/Actions.js",[],"/home/adarsh/Desktop/Companies/crm/src/components/NavBar.js",[],"/home/adarsh/Desktop/Companies/crm/src/components/client/client.js",["38","39"],"import React, { useState, useEffect } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { Table, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core'\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: '#cfd8dc',\n    color: '#263238',\n    fontSize: 18,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nfunction createData(surname, name, country, firstContact, email, sold, owner) {\n  return { surname, name, country, firstContact, email, sold, owner };\n}\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\n/**\n * This client function is exposed and routed from \"/\" in App.js\n * Functions\n * 1.Injects CRMStores where we have the list of \"actions\",\"observers\",\"actions\"\n * 2.It calls React Hooks\n *  a.useState which will set input as the passed state and setInput = function to update the state\n * \n */\n\nconst Clients = inject(\"CRMStores\")(observer((props) => {\n\n  //Sets the relevant clients in the state and then updates the state by calling setRelevantClients\n  const [relevantClients, setRelevantClients] = useState([...props.CRMStores.clients])\n  const [input, setInput] = useState('')\n  /**\n   * Use effect is called when render is completed and we want to update anything after that\n   */\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await props.CRMStores.getClients()\n      setRelevantClients(props.CRMStores.clients)\n      console.log(relevantClients)\n    }\n    fetchData()\n  }, [])\n\n  /**\n   * We can pass in a function in order to clear things when effect has completed\n   */\n  useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return c.last.toLowerCase().includes(input.toLowerCase())\n    })\n    setRelevantClients(tempList)\n  }, [input.length])\n\n  const handleChange = (event) => setInput(event.target.value)\n\n  const rows = relevantClients && relevantClients.map(c => {\n    return (createData(\n      c.last, c.first, c.country, c.date, c.email, c.sold, c.owner))\n  })\n\n  const classes = useStyles();\n  return (\n    <>\n      <input className='findClient' value={input} onChange={handleChange} placeholder='name'></input>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell align=\"center\">Surname</StyledTableCell>\n              <StyledTableCell align=\"center\">Name</StyledTableCell>\n              <StyledTableCell align=\"center\">Country</StyledTableCell>\n              <StyledTableCell align=\"center\">First Contact</StyledTableCell>\n              <StyledTableCell align=\"center\">Email</StyledTableCell>\n              <StyledTableCell align=\"center\">Sold</StyledTableCell>\n              <StyledTableCell align=\"center\">Owner</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.length && rows.map((row) => (\n              <StyledTableRow >\n                <StyledTableCell align=\"center\">{row.surname}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.name}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.country}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.firstContact}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.email}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.sold}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.owner}</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  )\n}))\n\nexport default Clients\n","/home/adarsh/Desktop/Companies/crm/src/components/actions/AddClient.js",[],"/home/adarsh/Desktop/Companies/crm/src/components/actions/UpdateClient.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":60,"column":6,"nodeType":"46","endLine":60,"endColumn":8,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"48","line":70,"column":6,"nodeType":"46","endLine":70,"endColumn":20,"suggestions":"49"},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.CRMStores' and 'relevantClients'. Either include them or remove the dependency array.","ArrayExpression",["52"],"React Hook useEffect has missing dependencies: 'input' and 'props.CRMStores.clients'. Either include them or remove the dependency array.",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},"Update the dependencies array to be: [props.CRMStores, relevantClients]",{"range":"58","text":"59"},"Update the dependencies array to be: [input, input.length, props.CRMStores.clients]",{"range":"60","text":"61"},[1749,1751],"[props.CRMStores, relevantClients]",[2034,2048],"[input, input.length, props.CRMStores.clients]"]