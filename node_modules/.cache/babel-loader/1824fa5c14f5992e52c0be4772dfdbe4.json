{"ast":null,"code":"var _jsxFileName = \"/home/adarsh/Desktop/Companies/crm/src/components/client/client.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { Table, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: '#cfd8dc',\n    color: 'black',\n    font: \"15px Arial, sans-serif\"\n  },\n  body: {\n    font: \"13px Arial, sans-serif\"\n  }\n}))(TableCell);\nconst SearchBoxStyle = {\n  chips: {\n    background: \"blue\"\n  },\n  searchBox: {\n    border: \"none\",\n    \"border-bottom\": \"1px solid blue\",\n    \"border-radius\": \"0px\"\n  },\n  multiselectContainer: {\n    color: \"blue\",\n    width: \"300px\",\n    fontSize: 10\n  }\n};\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\n\nfunction createData(surname, name, country, firstContact, email, sold, owner, asset_type) {\n  return {\n    surname,\n    name,\n    country,\n    firstContact,\n    email,\n    sold,\n    owner,\n    asset_type\n  };\n}\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700\n  }\n});\n/**\n * This client function is exposed and routed from \"/\" in App.js\n * Functions\n * 1.Injects CRMStores where we have the list of \"actions\",\"observers\",\"actions\"\n * 2.It calls React Hooks\n *  a.useState which will set input as the passed state and setInput = function to update the state\n * \n */\n\nconst Clients = inject(\"CRMStores\")(observer(_s(props => {\n  var _props$CRMStores, _props$CRMStores2, _props$CRMStores3;\n\n  _s();\n\n  //Sets the relevant clients in the state and then updates the state by calling setRelevantClients\n  const [relevantClients, setRelevantClients] = useState([...((_props$CRMStores = props.CRMStores) === null || _props$CRMStores === void 0 ? void 0 : _props$CRMStores.clients)]);\n  const [asset_type, setAssetType] = useState([...((_props$CRMStores2 = props.CRMStores) === null || _props$CRMStores2 === void 0 ? void 0 : _props$CRMStores2.assetType)]);\n  const [searchParamters, setSearchParameters] = useState([...((_props$CRMStores3 = props.CRMStores) === null || _props$CRMStores3 === void 0 ? void 0 : _props$CRMStores3.searchParamters)]);\n  const [input, setInput] = useState('');\n  /**\n   * Use effect is called when render is completed and we want to update anything after that\n   */\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await props.CRMStores.getClients();\n      setRelevantClients(props.CRMStores.clients);\n      console.log(relevantClients);\n    };\n\n    fetchData();\n  }, []);\n  /**\n   * We can pass in a function in order to clear things when effect has completed\n   */\n\n  useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return c.last.toLowerCase().includes(input.toLowerCase());\n    });\n    setRelevantClients(tempList);\n  }, [input.length]);\n  /**\n   * Filter client list according to selection\n   */\n\n  useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return c.last.toLowerCase().includes(input.toLowerCase());\n    });\n    setRelevantClients(tempList);\n  }, [selected.length]);\n\n  const handleChange = event => {\n    setInput(event.target.value);\n  };\n\n  const rows = relevantClients && relevantClients.map(c => {\n    return createData(c.last, c.first, c.country_name, c.date, c.email, c.sold, c.owner, c.asset_type);\n  });\n\n  function onSelectOrRemove(selectedList, selectedItem) {\n    const fetchData = async () => {\n      if (selectedList) await props.CRMStores.getSearchedClients(selectedList);\n      setRelevantClients(props.CRMStores.clients);\n    };\n\n    fetchData();\n  }\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Multiselect, {\n      options: searchParamters,\n      isObject: true,\n      displayValue: \"value\",\n      groupBy: \"key\",\n      showCheckbox: true,\n      style: SearchBoxStyle // value={selected}\n      ,\n      onSelect: onSelectOrRemove // Function will trigger on select event\n      ,\n      onRemove: onSelectOrRemove // onChange={setSelected}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        className: classes.table,\n        \"aria-label\": \"customized table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Client Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Client Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Country\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Asset Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Mediator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Owner Company\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Purchase Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Sold Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows.length && rows.map(row => /*#__PURE__*/_jsxDEV(StyledTableRow, {\n            children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: [row.surname, \" \", row.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: row.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: row.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: row.asset_type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"GRIP INVEST\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: row.owner\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: row.firstContact\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}, \"n7x0+TrW2KonfWzQEK002WsOunk=\", false, function () {\n  return [useStyles];\n})));\nexport default Clients;","map":{"version":3,"sources":["/home/adarsh/Desktop/Companies/crm/src/components/client/client.js"],"names":["React","useState","useEffect","inject","observer","withStyles","makeStyles","Table","Paper","TableBody","TableCell","TableContainer","TableHead","TableRow","Multiselect","StyledTableCell","theme","head","backgroundColor","color","font","body","SearchBoxStyle","chips","background","searchBox","border","multiselectContainer","width","fontSize","StyledTableRow","root","palette","action","hover","createData","surname","name","country","firstContact","email","sold","owner","asset_type","useStyles","table","minWidth","Clients","props","relevantClients","setRelevantClients","CRMStores","clients","setAssetType","assetType","searchParamters","setSearchParameters","input","setInput","fetchData","getClients","console","log","tempList","filter","c","last","toLowerCase","includes","length","selected","handleChange","event","target","value","rows","map","first","country_name","date","onSelectOrRemove","selectedList","selectedItem","getSearchedClients","classes","row"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { Table, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core'\nimport { Multiselect } from \"multiselect-react-dropdown\";\n\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: '#cfd8dc',\n    color: 'black',\n    font: \"15px Arial, sans-serif\"\n  },\n  body: {\n    font: \"13px Arial, sans-serif\"\n  },\n}))(TableCell);\n\nconst SearchBoxStyle = {\n  chips: {\n    background: \"blue\"\n  },\n  searchBox: {\n    border: \"none\",\n    \"border-bottom\": \"1px solid blue\",\n    \"border-radius\": \"0px\"\n\n  },\n  multiselectContainer: {\n    color: \"blue\",\n    width: \"300px\",\n    fontSize: 10\n\n  }\n};\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nfunction createData(surname, name, country, firstContact, email, sold, owner,asset_type) {\n  return { surname, name, country, firstContact, email, sold, owner,asset_type };\n}\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\n/**\n * This client function is exposed and routed from \"/\" in App.js\n * Functions\n * 1.Injects CRMStores where we have the list of \"actions\",\"observers\",\"actions\"\n * 2.It calls React Hooks\n *  a.useState which will set input as the passed state and setInput = function to update the state\n * \n */\n\nconst Clients = inject(\"CRMStores\")(observer((props) => {\n\n  //Sets the relevant clients in the state and then updates the state by calling setRelevantClients\n\n  const [relevantClients, setRelevantClients] = useState([...props.CRMStores?.clients])\n  const [asset_type, setAssetType] = useState([...props.CRMStores?.assetType])\n  const [searchParamters, setSearchParameters] = useState([...props.CRMStores?.searchParamters])\n\n  const [input, setInput] = useState('');\n  /**\n   * Use effect is called when render is completed and we want to update anything after that\n   */\n\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      await props.CRMStores.getClients()\n      setRelevantClients(props.CRMStores.clients)\n      console.log(relevantClients)\n    }\n    fetchData()\n  }, [])\n\n  /**\n   * We can pass in a function in order to clear things when effect has completed\n   */\n  useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return c.last.toLowerCase().includes(input.toLowerCase())\n    })\n    setRelevantClients(tempList)\n  }, [input.length])\n\n  /**\n   * Filter client list according to selection\n   */\n   \n  useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return c.last.toLowerCase().includes(input.toLowerCase())\n    })\n    setRelevantClients(tempList)\n  }, [selected.length])\n\n  const handleChange = (event) => {\n    setInput(event.target.value)\n  }\n\n  const rows = relevantClients && relevantClients.map(c => {\n    return (createData(\n      c.last, c.first, c.country_name, c.date, c.email, c.sold, c.owner,c.asset_type))\n  })\n\n  function onSelectOrRemove(selectedList, selectedItem) {\n    const fetchData = async () => {\n      if(selectedList)\n      await props.CRMStores.getSearchedClients(selectedList)\n      setRelevantClients(props.CRMStores.clients)\n    }\n    fetchData()\n    \n  }\n\n  const classes = useStyles();\n  return (\n    <div><Multiselect\n    options={searchParamters}\n    isObject={true}\n    displayValue=\"value\"\n    groupBy=\"key\"\n    showCheckbox={true}\n    style = {SearchBoxStyle}\n    // value={selected}\n    onSelect={onSelectOrRemove} // Function will trigger on select event\n    onRemove={onSelectOrRemove}\n    // onChange={setSelected}\n      />\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell align=\"center\">Client Name</StyledTableCell>\n              <StyledTableCell align=\"center\">Client Email</StyledTableCell>\n              <StyledTableCell align=\"center\">Country</StyledTableCell>\n              <StyledTableCell align=\"center\">Asset Type</StyledTableCell>\n              <StyledTableCell align=\"center\">Mediator</StyledTableCell>\n              <StyledTableCell align=\"center\">Owner Company</StyledTableCell>\n              <StyledTableCell align=\"center\">Purchase Date</StyledTableCell>\n              <StyledTableCell align=\"center\">Sold Date</StyledTableCell>\n              {/* <StyledTableCell align=\"center\">Email</StyledTableCell>\n              <StyledTableCell align=\"center\">Email</StyledTableCell> */}\n\n              {/* <StyledTableCell align=\"center\">Sold</StyledTableCell>\n              <StyledTableCell align=\"center\">Owner</StyledTableCell> */}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.length && rows.map((row) => (\n              <StyledTableRow >\n                <StyledTableCell align=\"center\">{row.surname} {row.name}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.email}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.country}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.asset_type}</StyledTableCell>\n                <StyledTableCell align=\"center\">GRIP INVEST</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.owner}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.firstContact}</StyledTableCell>\n                <StyledTableCell align=\"center\">-</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      </div>\n  )\n}))\n\nexport default Clients\n"]},"metadata":{},"sourceType":"module"}