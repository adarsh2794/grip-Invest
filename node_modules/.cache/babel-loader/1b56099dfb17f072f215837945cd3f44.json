{"ast":null,"code":"import { observable, computed, action, makeObservable } from 'mobx';\nimport axios from 'axios';\n/**\n * Note 'axios' is a web client that will call the relevant apis which is defined in api.js\n */\n\nexport class CRMStores {\n  constructor() {\n    this.clients = [];\n    this.owners = [];\n    this.emailTypes = [];\n    this.chartsData = [];\n    makeObservable(this, {\n      clients: observable,\n      owners: observable,\n      emailTypes: observable,\n      getClients: action,\n      getOwners: action,\n      getHottestCountry: action,\n      addClient: action,\n      getEmailTypes: action,\n      updateEmailType: action,\n      newClients: computed,\n      emailsSent: computed,\n      outstandingClients: computed,\n      getBudgetsData: action,\n      getChartsData: action,\n      chartsData: observable\n    });\n  }\n  /**\n   * This is called by Client.js on useEffect function so that it fetches the client data and sets in the\n   * global varibale of this class\n   */\n\n\n  async getClients() {\n    let data = await axios.get(\"http://localhost:3002/clients\");\n    console.log(\"Successfully data derived\", data);\n    this.clients = data.data;\n  }\n\n  async getOwners() {\n    this.owners = data.data[0];\n  }\n\n  async getEmailTypes() {\n    let data = await axios.get(\"http://localhost:3002/email\");\n    this.emailTypes = data.data[0];\n  }\n\n  async getHottestCountry() {\n    let data = await axios.get(\"http://localhost:3002/hottestCountry\");\n    return data.data.category;\n  }\n\n  async addClient(newClient) {\n    await axios.post('http://localhost:3002/client', newClient);\n    this.getClients();\n  }\n\n  async updateEmailType(name, newType) {\n    await axios.put(`http://localhost:3002/client/${name}`, newType);\n    this.getClients();\n  }\n\n  async updateOwner(name, newOwner) {\n    await axios.put(`http://localhost:3002/client/${name}`, newOwner);\n    this.getClients();\n  }\n\n  async updateSold(name, newValue) {\n    await axios.put(`http://localhost:3002/client/${name}`, newValue);\n    this.getClients();\n  }\n\n  get newClients() {\n    const currentDate = new Date().toLocaleDateString();\n    const newClientsList = this.clients.filter(c => c.date.slice(1)[0] == currentDate[0] && c.date.slice(6) == currentDate.slice(5));\n    return newClientsList.length;\n  }\n\n  get emailsSent() {\n    return this.clients.filter(c => c.email_type !== null).length;\n  }\n\n  get outstandingClients() {\n    return this.clients.filter(c => c.sold == 0).length;\n  }\n\n  async getBudgetsData() {\n    let data = await this.getHottestCountry();\n    const newClients = {\n      value: this.newClients,\n      title: 'New Clients this Month',\n      icon: 'faChartLine',\n      color: 'green'\n    };\n    const emailsSent = {\n      value: this.emailsSent,\n      title: 'Emails Sent',\n      icon: 'faEnvelope',\n      color: 'blue'\n    };\n    const outStandingClients = {\n      value: this.outstandingClients,\n      title: 'Outstanding Clients',\n      icon: 'faUserCircle',\n      color: 'red'\n    };\n    const hottestCountry = {\n      value: data,\n      title: 'Hottest Country',\n      icon: 'faGlobeAmericas',\n      color: 'yellow'\n    };\n    const budgetsData = [newClients, emailsSent, outStandingClients, hottestCountry];\n    return budgetsData;\n  }\n\n  async getChartsData() {\n    let data = await axios.get(\"http://localhost:3002/chartsData\");\n    console.log(data.data);\n    this.chartsData = data.data;\n  }\n\n}","map":{"version":3,"sources":["/home/adarsh/Desktop/Companies/crm/src/stores/CRMStores.js"],"names":["observable","computed","action","makeObservable","axios","CRMStores","constructor","clients","owners","emailTypes","chartsData","getClients","getOwners","getHottestCountry","addClient","getEmailTypes","updateEmailType","newClients","emailsSent","outstandingClients","getBudgetsData","getChartsData","data","get","console","log","category","newClient","post","name","newType","put","updateOwner","newOwner","updateSold","newValue","currentDate","Date","toLocaleDateString","newClientsList","filter","c","date","slice","length","email_type","sold","value","title","icon","color","outStandingClients","hottestCountry","budgetsData"],"mappings":"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","sourcesContent":["import { observable, computed, action, makeObservable } from 'mobx'\nimport axios from 'axios'\n\n/**\n * Note 'axios' is a web client that will call the relevant apis which is defined in api.js\n */\n\nexport class CRMStores {\n    constructor() {\n        this.clients = []\n        this.owners = []\n        this.emailTypes = []\n        this.chartsData = []\n\n        makeObservable(this, {\n            clients: observable,\n            owners: observable,\n            emailTypes: observable,\n            getClients: action,\n            getOwners: action,\n            getHottestCountry: action,\n            addClient: action,\n            getEmailTypes: action,\n            updateEmailType: action,\n            newClients: computed,\n            emailsSent: computed,\n            outstandingClients: computed,\n            getBudgetsData: action,\n            getChartsData: action,\n            chartsData: observable\n\n        })\n    }\n    /**\n     * This is called by Client.js on useEffect function so that it fetches the client data and sets in the\n     * global varibale of this class\n     */\n    async getClients() {\n        let data = await axios.get(\"http://localhost:3002/clients\")\n        console.log(\"Successfully data derived\",data);\n        this.clients = data.data;\n    }\n    async getOwners() {\n        this.owners = data.data[0]\n    }\n\n    async getEmailTypes() {\n        let data = await axios.get(\"http://localhost:3002/email\")\n        this.emailTypes = data.data[0]\n    }\n\n    async getHottestCountry() {\n        let data = await axios.get(\"http://localhost:3002/hottestCountry\")\n        return data.data.category\n    }\n\n    async addClient(newClient) {\n        await axios.post('http://localhost:3002/client', newClient)\n        this.getClients()\n    }\n    async updateEmailType(name, newType) {\n        await axios.put(`http://localhost:3002/client/${name}`, newType)\n        this.getClients()\n    }\n\n    async updateOwner(name, newOwner) {\n        await axios.put(`http://localhost:3002/client/${name}`, newOwner)\n        this.getClients()\n    }\n\n    async updateSold(name, newValue) {\n        await axios.put(`http://localhost:3002/client/${name}`, newValue)\n        this.getClients()\n    }\n\n    get newClients() {\n        const currentDate = new Date().toLocaleDateString()\n        const newClientsList = this.clients.filter(c => c.date.slice(1)[0] == currentDate[0] && c.date.slice(6) == currentDate.slice(5))\n        return newClientsList.length\n    }\n\n    get emailsSent() {\n        return this.clients.filter(c => c.email_type !== null).length\n    }\n\n    get outstandingClients() {\n        return this.clients.filter(c => c.sold == 0).length\n    }\n\n    async getBudgetsData() {\n        let data = await this.getHottestCountry()\n        const newClients = { value: this.newClients, title: 'New Clients this Month', icon: 'faChartLine', color: 'green' }\n        const emailsSent = { value: this.emailsSent, title: 'Emails Sent', icon: 'faEnvelope', color: 'blue' }\n        const outStandingClients = { value: this.outstandingClients, title: 'Outstanding Clients', icon: 'faUserCircle', color: 'red' }\n        const hottestCountry = { value: data, title: 'Hottest Country', icon: 'faGlobeAmericas', color: 'yellow' }\n        const budgetsData = [newClients, emailsSent, outStandingClients, hottestCountry]\n        return budgetsData\n    }\n\n    async getChartsData() {\n        let data = await axios.get(\"http://localhost:3002/chartsData\")\n        console.log(data.data);\n        this.chartsData = data.data\n    }\n   \n}\n\n"]},"metadata":{},"sourceType":"module"}