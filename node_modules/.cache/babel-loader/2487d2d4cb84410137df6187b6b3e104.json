{"ast":null,"code":"var _jsxFileName = \"/home/adarsh/Desktop/Companies/crm/src/components/client/client.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { Table, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport ChipsArray from '../search/chipSearch';\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: '#cfd8dc',\n    color: '#263238',\n    fontSize: 18\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\n\nfunction createData(surname, name, country, firstContact, email, sold, owner, asset_type) {\n  return {\n    surname,\n    name,\n    country,\n    firstContact,\n    email,\n    sold,\n    owner,\n    asset_type\n  };\n}\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700\n  }\n});\n/**\n * This client function is exposed and routed from \"/\" in App.js\n * Functions\n * 1.Injects CRMStores where we have the list of \"actions\",\"observers\",\"actions\"\n * 2.It calls React Hooks\n *  a.useState which will set input as the passed state and setInput = function to update the state\n * \n */\n\nconst Clients = inject(\"CRMStores\")(observer(_s(props => {\n  var _props$CRMStores, _props$CRMStores2, _props$CRMStores3, _props$CRMStores4, _props$CRMStores5;\n\n  _s();\n\n  //Sets the relevant clients in the state and then updates the state by calling setRelevantClients\n  const [relevantClients, setRelevantClients] = useState([...((_props$CRMStores = props.CRMStores) === null || _props$CRMStores === void 0 ? void 0 : _props$CRMStores.clients)]);\n  const [searchAssets, setSearchAssets] = useState([...((_props$CRMStores2 = props.CRMStores) === null || _props$CRMStores2 === void 0 ? void 0 : _props$CRMStores2.searchAssets)]);\n  const [searchOwners, setSearchOwners] = useState([...((_props$CRMStores3 = props.CRMStores) === null || _props$CRMStores3 === void 0 ? void 0 : _props$CRMStores3.searchOwners)]);\n  const [owners, setOwners] = useState([...((_props$CRMStores4 = props.CRMStores) === null || _props$CRMStores4 === void 0 ? void 0 : _props$CRMStores4.owners)]);\n  const [asset_type, setAssetType] = useState([...((_props$CRMStores5 = props.CRMStores) === null || _props$CRMStores5 === void 0 ? void 0 : _props$CRMStores5.assetType)]);\n  const [input, setInput] = useState('');\n  const [selected, setSelected] = useState([]);\n  /**\n   * Use effect is called when render is completed and we want to update anything after that\n   */\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await props.CRMStores.getClients();\n      setRelevantClients(props.CRMStores.clients);\n      console.log(relevantClients);\n    };\n\n    fetchData();\n  }, []);\n  /**\n   * We can pass in a function in order to clear things when effect has completed\n   */\n\n  useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return c.last.toLowerCase().includes(input.toLowerCase());\n    });\n    setRelevantClients(tempList);\n  }, [input.length]);\n  /**\n   * Filter client list according to selection\n   */\n\n  useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return searchAssets.includes(c.asset_type);\n    });\n    setRelevantClients(tempList);\n  }, [searchAssets.length]);\n  useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return c.last.toLowerCase().includes(input.toLowerCase());\n    });\n    setRelevantClients(tempList);\n  }, [input.length]);\n\n  const handleChange = event => setInput(event.target.value);\n\n  const rows = relevantClients && relevantClients.map(c => {\n    return createData(c.last, c.first, c.country_name, c.date, c.email, c.sold, c.owner, c.asset_type);\n  });\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Multiselect, {\n      options: asset_type,\n      isObject: false,\n      value: selected,\n      onChange: setSearchAssets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        className: classes.table,\n        \"aria-label\": \"customized table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Client Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Client Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Country\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Asset Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Mediator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Owner Company\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Purchase Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"Sold Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows.length && rows.map(row => /*#__PURE__*/_jsxDEV(StyledTableRow, {\n            children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: [row.surname, \" \", row.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: row.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: row.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: row.asset_type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"GRIP INVEST\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: row.owner\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: row.firstContact\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"center\",\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}, \"tprUA7Z4qlkKUaxdSLkyBOneclE=\", false, function () {\n  return [useStyles];\n})));\nexport default Clients;","map":{"version":3,"sources":["/home/adarsh/Desktop/Companies/crm/src/components/client/client.js"],"names":["React","useState","useEffect","inject","observer","withStyles","makeStyles","Table","Paper","TableBody","TableCell","TableContainer","TableHead","TableRow","ChipsArray","Multiselect","StyledTableCell","theme","head","backgroundColor","color","fontSize","body","StyledTableRow","root","palette","action","hover","createData","surname","name","country","firstContact","email","sold","owner","asset_type","useStyles","table","minWidth","Clients","props","relevantClients","setRelevantClients","CRMStores","clients","searchAssets","setSearchAssets","searchOwners","setSearchOwners","owners","setOwners","setAssetType","assetType","input","setInput","selected","setSelected","fetchData","getClients","console","log","tempList","filter","c","last","toLowerCase","includes","length","handleChange","event","target","value","rows","map","first","country_name","date","classes","row"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { Table, Paper, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core'\nimport ChipsArray from '../search/chipSearch';\nimport { Multiselect } from \"multiselect-react-dropdown\";\n\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: '#cfd8dc',\n    color: '#263238',\n    fontSize: 18,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nfunction createData(surname, name, country, firstContact, email, sold, owner,asset_type) {\n  return { surname, name, country, firstContact, email, sold, owner,asset_type };\n}\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\n/**\n * This client function is exposed and routed from \"/\" in App.js\n * Functions\n * 1.Injects CRMStores where we have the list of \"actions\",\"observers\",\"actions\"\n * 2.It calls React Hooks\n *  a.useState which will set input as the passed state and setInput = function to update the state\n * \n */\n\nconst Clients = inject(\"CRMStores\")(observer((props) => {\n\n  //Sets the relevant clients in the state and then updates the state by calling setRelevantClients\n\n  const [relevantClients, setRelevantClients] = useState([...props.CRMStores?.clients])\n  const [searchAssets, setSearchAssets] = useState([...props.CRMStores?.searchAssets])\n  const [searchOwners, setSearchOwners] = useState([...props.CRMStores?.searchOwners])\n  const [owners, setOwners] = useState([...props.CRMStores?.owners])\n  const [asset_type, setAssetType] = useState([...props.CRMStores?.assetType])\n\n  const [input, setInput] = useState('')\n  const [selected, setSelected] = useState([]);\n\n  /**\n   * Use effect is called when render is completed and we want to update anything after that\n   */\n\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      await props.CRMStores.getClients()\n      setRelevantClients(props.CRMStores.clients)\n      console.log(relevantClients)\n    }\n    fetchData()\n  }, [])\n\n  /**\n   * We can pass in a function in order to clear things when effect has completed\n   */\n  useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return c.last.toLowerCase().includes(input.toLowerCase())\n    })\n    setRelevantClients(tempList)\n  }, [input.length])\n\n  /**\n   * Filter client list according to selection\n   */\n   useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return searchAssets.includes(c.asset_type)\n    })\n    setRelevantClients(tempList)\n  }, [searchAssets.length])\n\n  useEffect(() => {\n    let tempList = props.CRMStores.clients.filter(c => {\n      return c.last.toLowerCase().includes(input.toLowerCase())\n    })\n    setRelevantClients(tempList)\n  }, [input.length])\n\n  const handleChange = (event) => setInput(event.target.value)\n\n  const rows = relevantClients && relevantClients.map(c => {\n    return (createData(\n      c.last, c.first, c.country_name, c.date, c.email, c.sold, c.owner,c.asset_type))\n  })\n\n  const classes = useStyles();\n  return (\n    <div><Multiselect\n    options={asset_type}\n    isObject={false}\n    value={selected}\n    onChange={setSearchAssets}\n      />\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell align=\"center\">Client Name</StyledTableCell>\n              <StyledTableCell align=\"center\">Client Email</StyledTableCell>\n              <StyledTableCell align=\"center\">Country</StyledTableCell>\n              <StyledTableCell align=\"center\">Asset Type</StyledTableCell>\n              <StyledTableCell align=\"center\">Mediator</StyledTableCell>\n              <StyledTableCell align=\"center\">Owner Company</StyledTableCell>\n              <StyledTableCell align=\"center\">Purchase Date</StyledTableCell>\n              <StyledTableCell align=\"center\">Sold Date</StyledTableCell>\n              {/* <StyledTableCell align=\"center\">Email</StyledTableCell>\n              <StyledTableCell align=\"center\">Email</StyledTableCell> */}\n\n              {/* <StyledTableCell align=\"center\">Sold</StyledTableCell>\n              <StyledTableCell align=\"center\">Owner</StyledTableCell> */}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.length && rows.map((row) => (\n              <StyledTableRow >\n                <StyledTableCell align=\"center\">{row.surname} {row.name}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.email}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.country}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.asset_type}</StyledTableCell>\n                <StyledTableCell align=\"center\">GRIP INVEST</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.owner}</StyledTableCell>\n                <StyledTableCell align=\"center\">{row.firstContact}</StyledTableCell>\n                <StyledTableCell align=\"center\">-</StyledTableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      </div>\n  )\n}))\n\nexport default Clients\n"]},"metadata":{},"sourceType":"module"}