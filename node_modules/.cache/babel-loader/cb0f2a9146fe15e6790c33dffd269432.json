{"ast":null,"code":"import axios from 'axios';\nimport { action, makeObservable, observable } from 'mobx';\nexport class GripInvestAssetStore {\n  constructor() {\n    this.clients = [];\n    this.owners = [\"SKODA\", \"YAMAHA\", \"VOLVO\"];\n    this.assetType = [\"CAR\", \"BIKE\", \"BUS\"];\n    this.searchParamters = this.getSearchParameters();\n    makeObservable(this, {\n      clients: observable,\n      owners: observable,\n      assetType: observable,\n      getClients: action,\n      getOwners: action,\n      addClient: action,\n      searchParamters: observable\n    });\n  }\n  /**\n  * This is called by Client.js on useEffect function so that it fetches the client data and sets in the\n  * global varibale of this class\n  */\n\n\n  async getClients() {\n    let data = await axios.get(\"http://localhost:3002/clients\");\n    console.log(\"Successfully data derived\", data);\n    this.clients = data.data;\n  }\n\n  async getSearchedClients(searchedParameters) {\n    console.log(\"Data received\", searchedParameters);\n    let requestBody = {\n      searchParamters: searchedParameters,\n      assetType: this.assetType,\n      ownerType: this.ownerType\n    };\n    let data = await axios.post(\"http://localhost:3002/clients/search\", requestBody);\n    console.log(\"Successfully data derived\", data);\n    this.clients = data.data;\n  }\n\n  getSearchParameters() {\n    let searchObj = [];\n    this.owners.forEach(owner => {\n      searchObj.push({\n        key: \"Owner\",\n        \"value\": owner\n      });\n    });\n    this.assetType.forEach(asset => {\n      searchObj.push({\n        key: \"Asset Type\",\n        \"value\": asset\n      });\n    });\n    return searchObj;\n  }\n\n  async getOwners() {\n    return this.owners;\n  }\n\n  async getAssetTypes() {\n    return this.assetType;\n  }\n\n  async addClient(newClient) {\n    await axios.post('http://localhost:3002/client', newClient);\n    alert(\"New client created Successfully\");\n    this.getClients();\n  } //TODO:We can extend to update the owner and update the selling status of the client Asset\n\n\n  async updateOwner(name, newOwner) {\n    await axios.put(`http://localhost:3002/client/${name}`, newOwner);\n    this.getClients();\n  }\n\n  async updateSold(name, newValue) {\n    await axios.put(`http://localhost:3002/client/${name}`, newValue);\n    this.getClients();\n  }\n\n}","map":{"version":3,"sources":["/home/adarsh/Desktop/Companies/crm/src/stores/GripInvestAssetStore.js"],"names":["axios","action","makeObservable","observable","GripInvestAssetStore","constructor","clients","owners","assetType","searchParamters","getSearchParameters","getClients","getOwners","addClient","data","get","console","log","getSearchedClients","searchedParameters","requestBody","ownerType","post","searchObj","forEach","owner","push","key","asset","getAssetTypes","newClient","alert","updateOwner","name","newOwner","put","updateSold","newValue"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { action, makeObservable, observable } from 'mobx'\n\nexport class GripInvestAssetStore {\n    constructor() {\n        this.clients = []\n        this.owners =  [\"SKODA\",\"YAMAHA\",\"VOLVO\"]\n        this.assetType = [\"CAR\",\"BIKE\",\"BUS\"]\n        this.searchParamters = this.getSearchParameters()\n        \n        makeObservable(this, {\n            clients: observable,\n            owners: observable,\n            assetType: observable,\n            getClients: action,\n            getOwners: action,\n            addClient: action,\n            searchParamters:observable\n            \n        })\n    }\n    /**\n    * This is called by Client.js on useEffect function so that it fetches the client data and sets in the\n    * global varibale of this class\n    */\n    async getClients() {\n        let data = await axios.get(\"http://localhost:3002/clients\")\n        console.log(\"Successfully data derived\",data);\n        this.clients = data.data;\n    }\n    \n    async getSearchedClients(searchedParameters) {\n        console.log(\"Data received\",searchedParameters);\n        let requestBody = {\n            searchParamters:searchedParameters,\n            assetType:this.assetType,\n            ownerType:this.ownerType\n        }\n        let data = await axios.post(\"http://localhost:3002/clients/search\",requestBody)\n        console.log(\"Successfully data derived\",data);\n        this.clients = data.data;\n    }\n    getSearchParameters()\n    {\n        let searchObj = [];\n        this.owners.forEach((owner)=>{\n            searchObj.push({key:\"Owner\",\"value\":owner})\n        })\n        this.assetType.forEach((asset)=>{\n            searchObj.push({key:\"Asset Type\",\"value\":asset})\n        })\n        return searchObj;\n    }\n    async getOwners() {\n        return  this.owners;\n    }\n    \n    async getAssetTypes() {\n        return  this.assetType;\n    }\n    \n    async addClient(newClient) {\n        await axios.post('http://localhost:3002/client', newClient)\n        alert(\"New client created Successfully\");\n        this.getClients()\n    }\n    //TODO:We can extend to update the owner and update the selling status of the client Asset\n    async updateOwner(name, newOwner) {\n        await axios.put(`http://localhost:3002/client/${name}`, newOwner)\n        this.getClients()\n    }\n    \n    async updateSold(name, newValue) {\n        await axios.put(`http://localhost:3002/client/${name}`, newValue)\n        this.getClients()\n    }\n    \n}\n\n"]},"metadata":{},"sourceType":"module"}